--IN TODAY'S PROJECT, WE LOOK TO TACKLE ROAD ACCIDENTS DATA FOR THE YEAR 2021
--WE SHALL START BY STANDARDIZING AND TRANSFORMING THE COLUMNS, UPDATING THE DATASET, ANALYSING THE DATASET TO ANSWER QUESTIONS AND TO GAIN MEANINGFUL INSIGHTS.
--AFTER WHICH, I WILL THEN PROCEED TO VISUALIZING THE DATA USING TABLEAU PUBLIC. LET'S GET IN.

SELECT * FROM [Road Accidents]

--I'M ONLY WORKING WITH DATASETS WITH ACCIDENT INDEX NUMBERS TODAY
WITH ROAD_ACCID AS (SELECT * FROM [Road Accidents] 
WHERE ACCIDENT_INDEX IS NOT NULL)
SELECT * FROM ROAD_ACCID

--HOW MANY ROWS ARE WE WORKING IN FOR THS PROJECT (37705)
SELECT COUNT(JUNCTION_CONTROL) AS COUNTROWS FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL

--CHECKING FOR DUPLICATE VALUES
WITH ACCIDENTS AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY ACCIDENT_INDEX, [ACCIDENT DATE], JUNCTION_CONTROL, DAY_OF_WEEK, JUNCTION_DETAIL, ACCIDENT_SEVERITY, LATITUDE, LIGHT_CONDITIONS, NUMBER_OF_CASUALTIES,
[LOCAL_AUTHORITY_(DISTRICT)], CARRIAGEWAY_HAZARDS, LONGITUDE, NUMBER_OF_VEHICLES, ROAD_TYPE, POLICE_FORCE, ROAD_SURFACE_CONDITIONS, WEATHER_CONDITIONS, URBAN_OR_RURAL_AREA, VEHICLE_TYPE, TIME,
SPEED_LIMIT ORDER BY ACCIDENT_INDEX) AS ROW_NUM
FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL)
SELECT * FROM ACCIDENTS WHERE ROW_NUM > 1


--DATE STANDARDIZATION
SELECT [ACCIDENT DATE], CONVERT(DATE, [ACCIDENT DATE]) AS DATE FROM [Road Accidents]

--ADDING STANDARDIZED DATE
ALTER TABLE [Road Accidents]
ADD DATE DATE
UPDATE [Road Accidents]
SET DATE = CONVERT(DATE, [ACCIDENT DATE])

--ANALYZING DATA TO KNOW WHAT I AM UP AGAINST
SELECT DISTINCT(DAY_OF_WEEK) FROM [Road Accidents]

SELECT DISTINCT(JUNCTION_CONTROL) FROM [Road Accidents]

--CORRECT SOME SPELLING ERRORS AND MAKING SURE EVERYTHING IS CORRECT SO HAD TO CORRECT SPELLING ERRORS TO AVOID UNNECESSARY OUTLIER USING CASE FUNCTION
SELECT JUNCTION_CONTROL,
CASE 
WHEN JUNCTION_CONTROL = 'AUTO TRAFFIC SIGL' THEN 'AUTO TRAFFIC SIGNAL'
ELSE JUNCTION_CONTROL
END AS [Junction Contol] FROM [Road Accidents]

ALTER TABLE [Road Accidents]
ADD [Junction Control] varchar(100)

UPDATE [Road Accidents]
SET [Junction Control] = CASE 
WHEN JUNCTION_CONTROL = 'AUTO TRAFFIC SIGL' THEN 'AUTO TRAFFIC SIGNAL'
ELSE JUNCTION_CONTROL
END

--CHECKED TO MAKE SURE OUR CORRECTION WORKED
SELECT DISTINCT([JUNCTION CONTROL]) FROM [Road Accidents]

--CONTINUED WITH ANALYSING THE DATASET
SELECT DISTINCT(JUNCTION_DETAIL) FROM [Road Accidents]

WITH ROAD_ACCID AS (SELECT * FROM [Road Accidents] 
WHERE ACCIDENT_INDEX IS NOT NULL)
SELECT * FROM ROAD_ACCID

SELECT DISTINCT(ACCIDENT_SEVERITY) FROM [Road Accidents]

--ANOTHER SPELLING ERROR CAUSING PROBLEMS IN THIS COLUMN. THIS TIME, INSTEAD OF CASE FUNCTION, I DECIDED TO USE THE IIF FUNCTION
SELECT ACCIDENT_SEVERITY, IIF(ACCIDENT_SEVERITY = 'Fetal', 'Fatal', ACCIDENT_SEVERITY) AS [Accident Severity] FROM [Road Accidents]

ALTER TABLE [Road Accidents]
ADD [Accident Severity] varchar(100)

UPDATE [Road Accidents]
SET [ACCIDENT SEVERITY] = IIF(ACCIDENT_SEVERITY = 'Fetal', 'Fatal', ACCIDENT_SEVERITY)

--CONTINUED WITH DATA ANALYSING
SELECT DISTINCT(LIGHT_CONDITIONS) FROM [Road Accidents]

SELECT DISTINCT(Carriageway_Hazards) FROM [Road Accidents]
WHERE Carriageway_Hazards IS NOT NULL

SELECT DISTINCT(POLICE_FORCE) FROM [Road Accidents]

SELECT DISTINCT(ROAD_SURFACE_CONDITIONS) FROM [Road Accidents] WHERE ROAD_SURFACE_CONDITIONS IS NOT NULL

SELECT DISTINCT(ROAD_TYPE) FROM [Road Accidents] WHERE ROAD_TYPE IS NOT NULL

--I HAD TO STANDARDIZE THE TIME FORMAT SUCH THAT, WE HAVE ONLY TIME
SELECT TIME, CONVERT(TIME, TIME) AS Time_Only FROM [Road Accidents]

ALTER TABLE [Road Accidents]
ADD Time_Only Time

UPDATE [Road Accidents]
SET Time_Only = CONVERT(TIME, TIME)


--CONTINUED WITH DATA ANALYING
SELECT DISTINCT(URBAN_OR_RURAL_AREA) FROM [Road Accidents]

SELECT DISTINCT(WEATHER_CONDITIONS) FROM [Road Accidents] WHERE WEATHER_CONDITIONS IS NOT NULL

--HERE, I WANTED TO GROUP THE VEHICLE TYPES TO MAKE THE PROJECT ABIT SIMPLE TO UNDERSTANDING. i DECIDED TO USE CASE FUNTION AS IT'S MORE PROPER COMPARED TO IIF THIS TIME
SELECT DISTINCT(VEHICLE_TYPE) FROM [Road Accidents]

SELECT VEHICLE_TYPE,
CASE
WHEN VEHICLE_TYPE = 'MOTORCYCLE 125CC AND UNDER' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE 50CC AND UNDER' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE OVER 125CC AND UP TO 500CC' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE OVER 500CC' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'PEDAL CYCLE' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'TAXI/PRIVATE HIRE CAR' THEN 'Car'
WHEN VEHICLE_TYPE = 'Bus or coach (17 or more pass seats)' THEN 'Bus'
WHEN VEHICLE_TYPE = 'Minibus (8 - 16 passenger seats)' THEN 'Bus'
WHEN VEHICLE_TYPE = 'Goods 7.5 tonnes mgw and over' THEN 'Van'
WHEN VEHICLE_TYPE = 'Van / Goods 3.5 tonnes mgw or under' THEN 'Van'
WHEN VEHICLE_TYPE = 'Goods over 3.5t. and under 7.5t' THEN 'Van'
ELSE VEHICLE_TYPE
END AS [Vehicle Type] from [Road Accidents]

ALTER TABLE [Road Accidents]
ADD [Vehicle Type] varchar(100)

UPDATE [Road Accidents]
SET [Vehicle Type] = CASE
WHEN VEHICLE_TYPE = 'MOTORCYCLE 125CC AND UNDER' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE 50CC AND UNDER' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE OVER 125CC AND UP TO 500CC' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'MOTORCYCLE OVER 500CC' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'PEDAL CYCLE' THEN 'Motor Cycle'
WHEN VEHICLE_TYPE = 'TAXI/PRIVATE HIRE CAR' THEN 'Car'
WHEN VEHICLE_TYPE = 'Bus or coach (17 or more pass seats)' THEN 'Bus'
WHEN VEHICLE_TYPE = 'Minibus (8 - 16 passenger seats)' THEN 'Bus'
WHEN VEHICLE_TYPE = 'Goods 7.5 tonnes mgw and over' THEN 'Van'
WHEN VEHICLE_TYPE = 'Van / Goods 3.5 tonnes mgw or under' THEN 'Van'
WHEN VEHICLE_TYPE = 'Goods over 3.5t. and under 7.5t' THEN 'Van'
ELSE VEHICLE_TYPE
END

--CHECKING IF THE ABOVE WORKED .
SELECT DISTINCT([VEHICLE TYPE]) FROM [Road Accidents]

--WE THEN HAD TO DELETE CONVERTED COLUMNS FROM THE TABLE
ALTER TABLE [Road Accidents]
DROP COLUMN [ACCIDENT DATE], TIME, VEHICLE_TYPE, ACCIDENT_SEVERITY, JUNCTION_DETAIL


WITH ROAD_ACCID AS (SELECT * FROM [Road Accidents] 
WHERE ACCIDENT_INDEX IS NOT NULL)
SELECT * FROM ROAD_ACCID


--HERE, I WANTED TO EXTRACT THE DAY, MONTH, QUARTER AND YEAR ONLY FOR FUTURE ANALYSIS AND SIMPLICITY
SELECT DATENAME(MONTH, DATE) AS MONTH FROM [Road Accidents]

SELECT DATENAME(YEAR, DATE) AS YEAR FROM [Road Accidents]

SELECT DATENAME(WEEKDAY, DATE) AS WEEKDAY FROM [Road Accidents]

SELECT DATENAME(DAY, DATE) AS DATE FROM [Road Accidents]

SELECT DATENAME(QUARTER, DATE) AS QUARTER FROM [Road Accidents]

ALTER TABLE [Road Accidents]
ADD Month varchar(100)

ALTER TABLE [Road Accidents]
ADD Year varchar(100)

ALTER TABLE [Road Accidents]
ADD Day int

ALTER TABLE [Road Accidents]
DROP COLUMN Day

ALTER TABLE [Road Accidents]
ADD Quarter int

UPDATE [Road Accidents]
SET Month =  DATENAME(MONTH, DATE)

UPDATE [Road Accidents]
SET Year =  DATENAME(YEAR, DATE)

UPDATE [Road Accidents]
SET Day =  DATENAME(DAY, DATE)

UPDATE [Road Accidents]
SET Quarter =  DATENAME(QUARTER, DATE)

WITH ROAD_ACCID AS (SELECT * FROM [Road Accidents] 
WHERE ACCIDENT_INDEX IS NOT NULL)
SELECT * FROM ROAD_ACCID

--FIND MONTHS ONLY BELOW
SELECT DISTINCT(MONTH) FROM [Road Accidents]


--MOVING ON TO ANSWER SOME QUESTIONS REGARDING THIS DATASET
--ANALYSIS
--TOTAL NUMBER OF VEHICLES INVOLVED IN SUCH CASUALTIES
SELECT SUM(NUMBER_OF_VEHICLES) AS [TOTAL ACCIDENT VEHICLES] FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL

--AVERAGE NUMBER OF VEHICLES INVOLVED IN SUCH CASUALTIES
SELECT AVG(NUMBER_OF_VEHICLES) AS AVG_VEHICLE_COUNTS FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL

--TOTAL CASUALTIES
SELECT SUM(NUMBER_OF_CASUALTIES) AS TOTAL_INJURED_AND_DEAD FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL

--WHICH DAY DOES MOST ACCIDENTS OCCUR
SELECT DAY_OF_WEEK, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY DAY_OF_WEEK
ORDER BY CASUALTIES DESC

--WHICH MONTH PRODUCED THE HIGHEST NUMBER OF CASUALTIES
SELECT TOP 1 MONTH, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY MONTH
ORDER BY CASUALTIES DESC

--WHICH TOP 5 MONTHS PRODUCED THE HIGHEST CASUALTIES/
SELECT TOP 5 MONTH, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY MONTH
ORDER BY CASUALTIES DESC

--WHICH TOP 5 MONTHS PRODUCED THE LEAST CASUALTIES/
SELECT TOP 5 MONTH, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY MONTH
ORDER BY CASUALTIES ASC

--CALCULATE THE AVERAGE, MAX AND MIN CASUALTIES PER MONTH
SELECT DISTINCT(MONTH), AVG(NUMBER_OF_CASUALTIES) AS AVG_CASUALTIES, MAX(NUMBER_OF_CASUALTIES) AS MAX_CASUALTIES, MIN(NUMBER_OF_CASUALTIES) AS MIN_CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY MONTH
ORDER BY MAX_CASUALTIES, MIN_CASUALTIES, AVG_CASUALTIES DESC

--AVERAGE NUMBER OF CASUALTIES, MIN AND MAX CASUALTIES
SELECT AVG(NUMBER_OF_CASUALTIES) AS AVG_CASUALTIES, MAX(NUMBER_OF_CASUALTIES) AS MAX_CASUALTIES, MIN(NUMBER_OF_CASUALTIES) AS MIN_CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
ORDER BY AVG_CASUALTIES DESC, MAX_CASUALTIES, MIN_CASUALTIES

--TOTAL AND AVERAGE CASUALTIES BY ACCIDENT SEVERITY
SELECT [ACCIDENT SEVERITY], SUM(NUMBER_OF_CASUALTIES) AS TOTAL, AVG(NUMBER_OF_CASUALTIES) AS AVG_CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY [ACCIDENT SEVERITY]
ORDER BY TOTAL DESC

--ACCIDENT BY ROAD TYPE AND SURFACE CONDITIONS SUNG WINDOWS FUNCTIONS
SELECT DISTINCT(ROAD_SURFACE_CONDITIONS), ROAD_TYPE, SUM(NUMBER_OF_CASUALTIES) OVER(PARTITION BY ROAD_SURFACE_CONDITIONS) FROM [Road Accidents]

--TOTAL CASUALTIES BY ROAD TYPE ONLY
SELECT DISTINCT ROAD_TYPE, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY ROAD_TYPE 
ORDER BY CASUALTIES DESC

--WHICH VEHICLE TYPE HAS CAUSED ACCIDENTS MORE THAN A THOUSAND WITHIN THE PERIOD?
SELECT DISTINCT([VEHICLE TYPE]), SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY [VEHICLE TYPE]
HAVING SUM(NUMBER_OF_CASUALTIES) > 1000
ORDER BY CASUALTIES DESC

--ACCIDENTS BY VEHICLE TYPES
SELECT DISTINCT([VEHICLE TYPE]), SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY [VEHICLE TYPE]
ORDER BY CASUALTIES DESC

--CASUALTIES BY SPEED LIMIT AND LIGHT CONDITIONS
SELECT DISTINCT(SPEED_LIMIT), LIGHT_CONDITIONS, SUM(NUMBER_OF_CASUALTIES) AS CASUALTIES FROM [Road Accidents] WHERE ACCIDENT_INDEX IS NOT NULL
GROUP BY LIGHT_CONDITIONS, SPEED_LIMIT
ORDER BY CASUALTIES DESC

CREATE VIEW [Road Accident] AS (SELECT * FROM [Road Accidents] 
WHERE ACCIDENT_INDEX IS NOT NULL)

SELECT * FROM [Road Accident]

--FIND THE TABLEAU WORK ON MY PORTFOLIO WEBSITE
--THANK YOU






